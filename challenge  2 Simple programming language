import re

class MPL:
    def __init__(self):
        self.variables = {}

    def eval_expr(self, expr):
        try:
            # Replace variable names with their values
            expr = re.sub(r'\b[a-zA-Z_]\w*\b', lambda m: str(self.variables.get(m.group(), 0)), expr)
            return eval(expr)
        except Exception as e:
            print(f"Error evaluating expression '{expr}': {e}")
            return 0

    def execute_line(self, line):
        line = line.strip()

        if line.startswith("print"):
            expr = line[5:].strip()
            print(self.eval_expr(expr))

        elif line.startswith("if") and line.endswith(":"):
            condition = line[2:-1].strip()
            return ('IF', condition)

        elif line.startswith("while") and line.endswith(":"):
            condition = line[5:-1].strip()
            return ('WHILE', condition)

        elif '=' in line:
            var, expr = line.split('=', 1)
            var = var.strip()
            expr = expr.strip()
            self.variables[var] = self.eval_expr(expr)

    def run(self, code):
        lines = code.strip().split('\n')
        i = 0
        stack = []
        while i < len(lines):
            line = lines[i].rstrip()

            if not line:
                i += 1
                continue

            indent = len(line) - len(line.lstrip())
            stripped_line = line.strip()

            result = self.execute_line(stripped_line)

            if result:
                block_type, condition = result
                block_lines = []
                i += 1
                while i < len(lines):
                    next_line = lines[i]
                    if len(next_line.strip()) == 0:
                        i += 1
                        continue
                    next_indent = len(next_line) - len(next_line.lstrip())
                    if next_indent <= indent:
                        break
                    block_lines.append(next_line[next_indent:])
                    i += 1
                
                if block_type == 'IF':
                    if self.eval_expr(condition):
                        self.run('\n'.join(block_lines))
                elif block_type == 'WHILE':
                    while self.eval_expr(condition):
                        self.run('\n'.join(block_lines))
            else:
                i += 1

                  if __name__ == "__main__":
    with open("program.mpl", "r") as f:
        code = f.read()
    
    interpreter = MPL()
    interpreter.run(code)

                  // note : you have the program file named as program.mpl and it will run that code..
